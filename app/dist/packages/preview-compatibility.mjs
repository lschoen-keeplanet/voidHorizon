import Module from"./module.mjs";import System from"./system.mjs";import{ReleaseData}from"../../common/config.mjs";import Collection from"../../common/utils/collection.mjs";import{PACKAGE_AVAILABILITY_CODES}from"../../common/constants.mjs";export default class PreviewCompatibility{constructor(e){if(!(e instanceof ReleaseData))throw new Error("You must provide an instance of ReleaseData to the PreviewCompatibility constructor.");if(e.version===globalThis.release.version)throw new Error("You may not preview compatibility for the current software release.");this.release=e,this.release.maxGeneration=globalThis.release.maxGeneration,this.release.maxStableGeneration=globalThis.release.maxStableGeneration}release;modules=new Collection;systems=new Collection;async evaluate(){await this.getRepositoryPackages(),await this.testCompatibility();for(const e of this.modules.keys())Module.packages.has(e)||this.modules.delete(e)}async getRepositoryPackages(){await this.#e(System,this.systems,{installedOnly:!0}),await this.#e(Module,this.modules,{installedOnly:!1})}async testCompatibility(){const e=PACKAGE_AVAILABILITY_CODES;for(const e of this.modules.values())e.availability=e._testAvailability(this.release);for(const e of this.systems.values())e.availability=e._testAvailability(this.release);for(const t of System.packages.keys()){const s=this.systems.get(t);await s._testRequiredDependencies(this.modules)||(s.availability=e.MISSING_DEPENDENCY)}for(const t of Module.packages.keys()){const s=this.modules.get(t);await s._testRequiredDependencies(this.modules)||(s.availability=e.MISSING_DEPENDENCY)}}async#e(e,t,{installedOnly:s=!0}={}){t.clear();const a=e.getPackages(),i=await e.getRepositoryPackages(),o=await e.getRepositoryPackages({release:this.release});for(const e of o.packages.values())s&&!a.has(e.id)||t.set(e.id,e);for(const e of i.packages.values())s&&!a.has(e.id)||t.has(e.id)||t.set(e.id,e);for(const s of a.values())if(!t.has(s.id)){if(s.manifest)try{const a=await e.fromRemoteManifest(s.manifest);t.set(s.id,a);continue}catch(e){}t.set(s.id,s.clone())}}static async test(e={}){const t=new this(new ReleaseData({channel:"stable",node_version:16,...e}));return await t.evaluate(),t}}