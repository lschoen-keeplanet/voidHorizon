import fs from"fs";import path from"path";import{cleanHTML}from"./validators.mjs";import Files from"../files/files.mjs";import{fromUuid}from"../core/utils.mjs";import{randomID}from"../../common/utils/helpers.mjs";export function sanitizeFilePathField(t,{assetPath:e,documentId:a,fieldPath:r,user:i}={}){if(!t||this.base64)return t;const o=t.match(/^data:([a-z]+)\/([a-z0-9]+);base64,(.*)/);if(!o)return t;if(i&&!i.can("FILES_UPLOAD"))throw new Error(`You lack FILES_UPLOAD permission and may not upload base64 data to the ${this.name} field.`);const[s,n]=o.slice(2,4),m=`${[a,...r].filterJoin("-")}.${s}`,l=path.join(e,m);return fs.mkdirSync(e,{recursive:!0}),fs.writeFileSync(l,Buffer.from(n,"base64")),global.logger.info(`${vtt} | Extracted base64 asset: "${l}"`),Files.standardizePath(path.relative(global.paths.data,l))}export async function handleDocumentAssetUpload(t,e){const a=await fromUuid(t),r=a.constructor.extractedAssetPath,i=e.name.split("."),o=i.pop();return e.name=`${i.join(".")}-${randomID()}.${o}`,e.name=a.parent?[a.parent.id,a.collectionName,a.id,e.name].join("-"):e.name,fs.mkdirSync(r,{recursive:!0}),Files.standardizePath(path.relative(global.paths.data,r))}export function sanitizeHTMLField(t,e={}){return t?cleanHTML(t):t}