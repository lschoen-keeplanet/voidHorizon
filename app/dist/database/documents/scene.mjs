import BaseScene from"../../../common/documents/scene.mjs";import ServerDocumentMixin from"../backend/server-document.mjs";import{GRID_TYPES}from"../../../common/constants.mjs";import{setProperty}from"../../../common/utils/helpers.mjs";export default class Scene extends(ServerDocumentMixin(BaseScene)){static isCached=!0;async _preCreate(e,t,s){return this.active&&await this.activate(),super._preCreate(e,t,s)}async _preUpdate(e,t,s){await super._preUpdate(e,t,s),e.active&&await this.activate()}_onDelete(e,t){db.Combat._onDeleteScene(this),db.FogExploration.sublevel.findDelete({scene:this.id})}async activate(){logger.info(`Activating scene ${this.name} [${this.id}]`);const e=await this.constructor.sublevel.findUpdate({active:!0},{active:!1});this.updateSource({active:!0}),game.documentCache.set(this),e.forEach((({_id:e})=>{const t=game.documentCache.get(this.constructor.documentName,e);t&&(t.updateSource({active:!1}),game.documentCache.set(t))}))}static async migrateSystem(){const{logger:e}=global;e.info(`${vtt} | Migrating Scene documents to the latest game system data model`);const t=await this.find({},{}),s=this.db.batch();for(const o of t){for(const t of o.tokens){await t.loadRelatedDocuments();const o=t.delta?._source.items||[];if(t.actorLink||!o.length)continue;const c=[];for(const t of o)try{if(t._tombstone)return t;const e=db.Item.fromSource(t);e.updateSource({system:e.migrateSystemData()}),c.push(e.toObject())}catch(t){e.error(t)}t.delta._source.items=c,t.batchWrite(s)}o.batchWrite(s,{writeEmbedded:!1})}await s.write(),globalThis.logger.info(`Successfully migrated ${t.length} Scene documents to the latest system data model.`)}static async get(e,t,s){const o=game.documentCache.get(this.documentName,e)??await super.get(e,t,s);return game.documentCache.set(o),o}static async getMany(e,t){const s=[],o=[];for(const t of e){const e=game.documentCache.get(this.documentName,t);e?o.push(e):s.push(t)}return s.length?o.concat(await super.getMany(e,t)):o}static fromSource(e,t){const s=e.grid?.type??e.gridType;return[GRID_TYPES.HEXODDR,GRID_TYPES.HEXEVENR,GRID_TYPES.HEXODDQ,GRID_TYPES.HEXEVENQ].includes(s)&&!e._stats?.coreVersion&&setProperty(e,"flags.core.legacyHex",!0),super.fromSource(e,t)}static socketListeners(e){e.on("preloadScene",this.#e.bind(e)),e.on("pullToScene",this.#t.bind(e))}static#e(e,t){this.broadcast.emit("preloadScene",e),t(e)}static async#t(e,t){if(!this.user.isGM)return;const s=(await db.User.get(t,{strict:!0})).sockets;s.length&&s.forEach((t=>this.server.to(t.id).emit("pullToScene",e)))}}