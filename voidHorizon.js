import VHItemSheet from "./module/sheets/VHItemSheet.js";
import {voidHorizon} from "./module/config.js";
import {registerSettings} from "./module/settings.js";
import "./scripts/heros-sheet.js";
import "./scripts/npc-sheet.js";

// Diagnostic avanc√© des hooks probl√©matiques
Hooks.on('getHeaderControlsApplicationV2', function(app, buttons) {
    console.log('üö® === DIAGNOSTIC HOOK getHeaderControlsApplicationV2 ===');
    console.log('üì± Application:', app);
    console.log('üîò Boutons:', buttons);
    
    // Analyser tous les hooks enregistr√©s pour ce hook
    if (Hooks.events.getHeaderControlsApplicationV2) {
        console.log('üìã Tous les hooks getHeaderControlsApplicationV2 enregistr√©s:');
        
        Hooks.events.getHeaderControlsApplicationV2.forEach((hook, index) => {
            console.log(`  üîç Hook ${index}:`, hook);
            
            if (hook.fn) {
                const fnStr = hook.fn.toString();
                console.log(`  üìù Source (200 premiers caract√®res):`, fnStr.substring(0, 200) + '...');
                
                // Chercher des indices dans le code
                if (fnStr.includes('main.js')) {
                    console.log(`  üö® ATTENTION: Contient 'main.js' - POTENTIELLEMENT PROBL√âMATIQUE`);
                }
                if (fnStr.includes('app.type')) {
                    console.log(`  üö® ATTENTION: Acc√®de √† 'app.type' - CAUSE DE L'ERREUR`);
                }
                if (fnStr.includes('Cannot read properties')) {
                    console.log(`  üö® ATTENTION: Contient le message d'erreur`);
                }
                if (fnStr.includes('voidHorizon')) {
                    console.log(`  ‚úÖ Contient 'voidHorizon' - Notre code`);
                }
            }
        });
    }
    
    console.log('üö® === FIN DU DIAGNOSTIC ===');
    
    // Retourner les boutons sans modification
    return buttons;
});

// Initialisation unifi√©e du syst√®me voidHorizon
Hooks.once('init', async function() {
    console.log('üöÄ Initialisation du syst√®me voidHorizon');
    
    try {
        // Configuration du syst√®me
        CONFIG.voidHorizon = voidHorizon;
        console.log('‚úÖ Configuration syst√®me charg√©e');
        
        // Enregistrer les param√®tres de configuration
        registerSettings();
        console.log('‚úÖ Param√®tres voidHorizon enregistr√©s avec succ√®s');
        
        // Attendre que les fonctions d'enregistrement soient disponibles
        let attempts = 0;
        const maxAttempts = 10;
        
        while (attempts < maxAttempts) {
            if (window.registerHeroSheet && window.registerNpcSheet && window.registerItemSheet) {
                console.log('‚úÖ Toutes les fonctions d\'enregistrement sont disponibles');
                break;
            }
            
            console.log(`‚è≥ Attente des fonctions d'enregistrement... (tentative ${attempts + 1}/${maxAttempts})`);
            await new Promise(resolve => setTimeout(resolve, 100));
            attempts++;
        }
        
        if (attempts >= maxAttempts) {
            console.warn('‚ö†Ô∏è Fonctions d\'enregistrement non disponibles, utilisation du fallback');
            
            // Fallback : enregistrement direct
            Items.unregisterSheet("core", ItemSheet);
            Items.registerSheet("voidHorizon", VHItemSheet, {makeDefault: true});
            console.log('‚úÖ Feuilles d\'objets voidHorizon enregistr√©es (fallback)');
        } else {
            // Enregistrer les feuilles d'objets personnalis√©es
            if (window.registerItemSheet) {
                window.registerItemSheet();
            }
            console.log('‚úÖ Feuilles d\'objets voidHorizon enregistr√©es');
            
            // Enregistrer les feuilles d'acteurs personnalis√©es
            if (window.registerHeroSheet) {
                window.registerHeroSheet();
            }
            if (window.registerNpcSheet) {
                window.registerNpcSheet();
            }
            console.log('‚úÖ Feuilles d\'acteurs voidHorizon enregistr√©es');
        }
        
        console.log('üéØ JS custom operationnel');
        
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'initialisation:', error);
    }
});

// Quand le jeu est pr√™t
Hooks.once('ready', async function() {
    console.log('üéÆ Syst√®me voidHorizon pr√™t et op√©rationnel');
    
    // V√©rifier que les param√®tres sont bien enregistr√©s
    if (game.settings) {
        console.log('üîß Param√®tres Foundry VTT disponibles:', Object.keys(game.settings.settings));
        console.log('üéõÔ∏è Param√®tres voidHorizon disponibles:', Object.keys(game.settings.settings).filter(key => key.startsWith('voidHorizon')));
    } else {
        console.error('‚ùå game.settings n\'est pas disponible');
    }
});